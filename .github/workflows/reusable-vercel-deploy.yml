name: Deploy to Vercel

on:
  workflow_call:
    inputs:
      app-name:
        description: 'The name of the app to deploy.'
        type: string
        required: true
      github-environment:
        description: 'The GitHub environment to deploy to.'
        type: string
        required: true
      contentful-env:
        description: 'The Contentful environment to deploy to. Used in data-env.'
        type: string
        required: false
      vercel-environment:
        description: 'The Vercel environment to deploy to.'
        type: string
        required: true
        default: 'preview'
      domains: 
        description: 'The list of domains to alias the deployment, one per line.'
        type: string
        required: true

    outputs:
      deployment-url:
        description: "Vercel's deployment URL."
        value: ${{ github.needs.vercel-deploy.outputs.deployment-url }}

jobs:
  vercel-deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.github-environment }}
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      CONTENTFUL_SHARED_CONTENT_ENV: ${{ inputs.contentfu-env || vars.CONTENTFUL_SHARED_CONTENT_ENV }}
      CONTENTFUL_SHARED_CONTENT_SPACE: ${{ secrets.CONTENTFUL_SHARED_CONTENT_SPACE }}
      CONTENTFUL_SHARED_CONTENT_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_SHARED_CONTENT_ACCESS_TOKEN }}
    steps:
      - name: Check out code.
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Setup PNPM
        uses: './.github/actions/setup-pnpm'
      
      - name: Install Vercel CLI
        shell: bash
        run: pnpm install -g vercel@latest

      - name: Set VERCEL_PROJECT_ID based on app name
        id: set-vercel-project-id
        run: |
          elif [ "${{ inputs.app-name }}" = "Login App" ]; then
            echo "VERCEL_PROJECT_ID=${{ secrets.VERCEL_LOGIN_PROJECT_ID }}" >> $GITHUB_ENV
          elif [ "${{ inputs.app-name }}" = "Unified-web App" ]; then
            echo "VERCEL_PROJECT_ID=${{ secrets.VERCEL_UNIFIED_PROJECT_ID }}" >> $GITHUB_ENV
          else
            echo "Unknown app name: ${{ inputs.app-name }}"
            exit 1
          fi
      
      - name: Pull Vercel environment information
        shell: bash
        run: vercel pull --yes --environment=${{ inputs.vercel-environment }} --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Build and Deploy Project Artifacts to Vercel
        shell: bash
        run: |
          # Conditionally add --prod flag if vercel-environment is production
          if [[ "${{ inputs.vercel-environment }}" == "production" ]]; then
            vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
            vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} > domain.txt
          else
            vercel build --token=${{ secrets.VERCEL_TOKEN }}
            vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > domain.txt
          fi
      
          # Alias the deployment to all provided domains
          while IFS= read -r domain; do
            if [[ -n "$domain" ]]; then  # Only process non-empty lines
              vercel alias set `cat domain.txt` "$domain" --scope=${{ secrets.VERCEL_ORG_ID }} --token=${{ secrets.VERCEL_TOKEN }}
            fi
          done <<< "${{ inputs.domains }}"
      
      - name: Set deployment URL output
        id: vercel-deploy
        shell: bash
        run: |
          # Extract the first domain from the list of domains
          first_domain=$(echo "${{ inputs.domains }}" | head -n 1)
      
          # Set the deployment URL output using the first domain
          echo "deployment-url=https://$first_domain" >> $GITHUB_OUTPUT
      
      - name: Comment pull request with deployment URL
        if: ${{ github.event_name == 'pull_request' }}
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            **${{ inputs.app-name }}** - Deployment succeeded :rocket:
            You can access the deployed app here: ${{ steps.vercel-deploy.outputs.deployment-url }}
          comment-tag: $${{ steps.vercel-deploy.outputs.deployment-url }}

      - name: Notify deployment outcome to Slack
        if: ${{ job.status != 'cancelled' }}
        uses: ./.github/actions/slack-notifications
        with:
          app-name: ${{ inputs.app-name }}
          deployment-url: ${{ steps.vercel-deploy.outputs.deployment-url }}
          deployment-status: ${{ job.status }}
          slack-channel-id: ${{ secrets.SLACK_DEPLOYMENTS_CHANNEL_ID}}
          slack-notifications-webhook-url: ${{ secrets.SLACK_NOTIFICATIONS_WEBHOOK_URL }}